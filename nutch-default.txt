map.put("store.ip.address","false");
map.put("file.content.limit","65536");
map.put("file.crawl.redirect_noncanonical","true");
map.put("file.content.ignored","true");
map.put("file.crawl.parent","true");
map.put("http.agent.name","");
map.put("http.robots.agents","");
map.put("http.robots.403.allow","true");
map.put("http.agent.description","");
map.put("http.agent.url","");
map.put("http.agent.email","");
map.put("http.agent.version","Nutch-2.3.1");
map.put("http.agent.rotate","false");
map.put("http.agent.rotate.file","agents.txt");
map.put("http.agent.host","");
map.put("http.timeout","10000");
map.put("http.max.delays","100");
map.put("http.content.limit","65536");
map.put("http.proxy.host","");
map.put("http.proxy.port","");
map.put("http.proxy.username","");
map.put("http.proxy.password","");
map.put("http.proxy.realm","");
map.put("http.auth.file","httpclient-auth.xml");
map.put("http.verbose","false");
map.put("http.useHttp11","false");
map.put("http.accept.language","en-us,en-gb,en;q=0.7,*;q=0.3");
map.put("http.accept","text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8");
map.put("http.store.responsetime","true");
map.put("ftp.username","anonymous");
map.put("ftp.password","anonymous@example.com");
map.put("ftp.content.limit","65536");
map.put("ftp.timeout","60000");
map.put("ftp.server.timeout","100000");
map.put("ftp.keep.connection","false");
map.put("ftp.follow.talk","false");
map.put("db.fetch.interval.default","2592000");
map.put("db.fetch.interval.max","7776000");
map.put("db.fetch.schedule.class","org.apache.nutch.crawl.DefaultFetchSchedule");
map.put("db.fetch.schedule.adaptive.inc_rate","0.4");
map.put("db.fetch.schedule.adaptive.dec_rate","0.2");
map.put("db.fetch.schedule.adaptive.min_interval","60");
map.put("db.fetch.schedule.adaptive.max_interval","31536000");
map.put("db.fetch.schedule.adaptive.sync_delta","true");
map.put("db.fetch.schedule.adaptive.sync_delta_rate","0.3");
map.put("db.update.additions.allowed","true");
map.put("db.update.max.inlinks","10000");
map.put("db.ignore.internal.links","true");
map.put("db.ignore.external.links","false");
map.put("db.score.injected","1.0");
map.put("db.score.link.external","1.0");
map.put("db.score.link.internal","1.0");
map.put("db.score.count.filtered","false");
map.put("db.max.outlinks.per.page","100");
map.put("db.max.anchor.length","100");
map.put("db.parsemeta.to.crawldb","");
map.put("db.fetch.retry.max","3");
map.put("db.signature.class","org.apache.nutch.crawl.MD5Signature");
map.put("db.signature.text_profile.min_token_len","2");
map.put("db.signature.text_profile.quant_rate","0.01");
map.put("generate.max.count","-1");
map.put("generate.max.distance","-1");
map.put("generate.count.mode","host");
map.put("generate.update.crawldb","false");
map.put("partition.url.mode","byHost");
map.put("crawl.gen.delay","604800000");
map.put("fetcher.server.delay","5.0");
map.put("fetcher.server.min.delay","0.0");
map.put("fetcher.max.crawl.delay","30");
map.put("fetcher.threads.fetch","10");
map.put("fetcher.threads.per.queue","1");
map.put("fetcher.queue.mode","byHost");
map.put("fetcher.queue.use.host.settings","false");
map.put("fetcher.verbose","false");
map.put("fetcher.parse","false");
map.put("fetcher.store.content","true");
map.put("fetcher.timelimit.mins","-1");
map.put("fetcher.max.exceptions.per.queue","-1");
map.put("fetcher.throughput.threshold.pages","-1");
map.put("fetcher.throughput.threshold.sequence","5");
map.put("fetcher.throughput.threshold.check.after","5");
map.put("fetcher.queue.depth.multiplier","50");
map.put("indexingfilter.order","");
map.put("indexer.score.power","0.5");
map.put("indexer.max.title.length","100");
map.put("moreIndexingFilter.indexMimeTypeParts","true");
map.put("anchorIndexingFilter.deduplicate","false");
map.put("urlnormalizer.order","org.apache.nutch.net.urlnormalizer.basic.BasicURLNormalizer org.apache.nutch.net.urlnormalizer.regex.RegexURLNormalizer");
map.put("urlnormalizer.regex.file","regex-normalize.xml");
map.put("urlnormalizer.loop.count","1");
map.put("mime.type.magic","true");
map.put("plugin.folders","plugins");
map.put("plugin.auto-activation","true");
map.put("plugin.includes","protocol-http|urlfilter-regex|parse-(html|tika)|index-(basic|anchor)|urlnormalizer-(pass|regex|basic)|scoring-opic");
map.put("plugin.excludes","");
map.put("parse.plugin.file","parse-plugins.xml");
map.put("parser.character.encoding.default","windows-1252");
map.put("encodingdetector.charset.min.confidence","-1");
map.put("parser.caching.forbidden.policy","content");
map.put("parser.html.impl","neko");
map.put("parser.html.form.use_action","false");
map.put("parser.html.outlinks.ignore_tags","");
map.put("htmlparsefilter.order","");
map.put("parser.timeout","30");
map.put("parser.skip.truncated","true");
map.put("urlfilter.tld.length","");
map.put("urlfilter.domain.file","domain-urlfilter.txt");
map.put("urlfilter.regex.file","regex-urlfilter.txt");
map.put("urlfilter.automaton.file","automaton-urlfilter.txt");
map.put("urlfilter.prefix.file","prefix-urlfilter.txt");
map.put("urlfilter.suffix.file","suffix-urlfilter.txt");
map.put("urlfilter.order","");
map.put("scoring.filter.order","");
map.put("lang.ngram.min.length","1");
map.put("lang.ngram.max.length","4");
map.put("lang.analyze.max.length","2048");
map.put("lang.extraction.policy","detect,identify");
map.put("lang.identification.only.certain","false");
map.put("index.metadata","description,keywords");
map.put("metatags.names","*");
map.put("hadoop.job.history.user.location","${hadoop.log.dir}/history/user");
map.put("io.serializations","org.apache.hadoop.io.serializer.WritableSerialization,org.apache.hadoop.io.serializer.JavaSerialization");
map.put("solr.mapping.file","solrindex-mapping.xml");
map.put("solr.commit.size","250");
map.put("solr.commit.index","true");
map.put("solr.auth","false");
map.put("elastic.host","");
map.put("elastic.port","9300");
map.put("elastic.cluster","");
map.put("elastic.index","nutch");
map.put("elastic.max.bulk.docs","250");
map.put("elastic.max.bulk.size","2500500");
map.put("storage.data.store.class","org.apache.gora.memory.store.MemStore");
map.put("storage.schema.webpage","webpage");
map.put("storage.schema.host","host");
map.put("storage.crawl.id","");
map.put("gora.buffer.read.limit","10000");
map.put("gora.buffer.write.limit","10000");
